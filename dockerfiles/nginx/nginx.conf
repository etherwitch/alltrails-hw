worker_processes 1;
pid /tmp/nginx.pid;
daemon off;

events {
    worker_connections 32;
}

http {
    include /etc/nginx/mime.types;
    keepalive_timeout 65;

    ##this probably isn't necessary but can be useful depending on the content
    default_type application/octet-stream;

    #disable Nagle's algorithm
    tcp_nodelay on;

    #don't bother enabling direct kernel access to file manipulation since we're a reverse proxy
    sendfile off;

    #don't wait for MTU to be full before transmitting
    tcp_nopush off;

    #dont leak NginX version in error page headers
    server_tokens off;

    #this is the default but its nice to have explicitly definied
    log_format details escape=none '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';
    access_log /dev/stdout details;
    error_log /dev/stdout error;

    #note: using upstreams means that nginx will fall-over if the specified ports aren't live when nginx starts, this can be benificial or detremental depending on circumstances.
    upstream "nav" {
      server nav:3500;
    }

    upstream "authn" {
      server authn:3000;
    }

    # redirect all http traffic to HTTPS
    server {
      server_name kubernetes.docker.internal;
      listen 80 default_server;
      return 301 https://$http_host$request_uri;
    }

    server {
        listen 443 ssl default_server;
        server_name kubernetes.docker.internal;

	#do not allow non https access
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

	#Don't allow other sites to embed iframes
        add_header X-Frame-Options SAMEORIGIN always;

	# Only trust content served by our servers.
        add_header Content-Security-Policy "default-src 'self';";

        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

	# disable some old and busted cyphers.
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4;

	#we're going to load the key/cert from a mounted secret
        ssl_certificate /nginx-certs/tls.crt;
        ssl_certificate_key /nginx-certs/tls.key;
        ssl_protocols SSLv3 TLSv1 TLSv1.2 TLSv1.3;


        location /authn {
            proxy_pass http://authn;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_read_timeout 1d;
            proxy_pass_header Server;
            proxy_set_header X-Forwarded-Proto http;
            proxy_redirect off;
        }

        location /nav {
            proxy_pass http://nav;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_read_timeout 1d;
            proxy_pass_header Server;
            proxy_set_header X-Forwarded-Proto http;
            proxy_redirect off;
        }

	location / {
	    rewrite / /authn;
	}

    }
}
